firefox download:
http://www.mozilla.org/en-US/products/download.html?product=firefox-16.0.2&os=win&lang=en-US

firebug down load:
https://addons.mozilla.org/en-US/firefox/addon/firebug/
firebug-1.10.5-fx.xpi
to install xpi: open firefox, drag .xpi into 

Firebug user guide
 http://www.evotech.net/blog/2007/06/introduction-to-firebug

set break point:
set breakpoints, just click on any line number, and a red dot will appear to indicate that the breakpoint is set. Click the red dot again to remove the breakpoint.


install GIT(step by step)
http://help.github.com/set-up-git-redirect
A UI version easy to use:
Download GitHub for Windows, install
Github for Windows使用图文教程
http://www.cr173.com/html/15618_1.html
First time to use?-apply account via Github for Windows UI.


Basic GITHUb operations:
-create/delete repo on my site-https://github.com/ZhenjunJohnFeng
-use "Github for Windows" on different machines to work with one repo.
-pull, edit, push(sync) via “Github for Windows”
How to solve: Failed looking for HEAD in this repository
clone to another local repository;  do not use the damaged local repository anymore(stop track, delete,).

Git Bash, to pull code from gitsub site:
git clone https://github.com/ZhenjunJohnFeng/Sandbox

HTML DOM Image 对象
http://www.w3school.com.cn/

html5 中文乱码, solved by:
<head>
<meta charset="UTF-8">

html5:
open with VS, split(show both source and view)


HTML5中表单验证的8种方法 
http://www.189works.com/article-56000-1.html
e.g. <input id="num_elevation" pattern="^(-?\d+)(\.\d+)?" required=true title="请输入数值"/> <br /> 
验证数字的正则表达式集 
验证数字：^[0-9]*$
验证n位的数字：^\d{n}$
验证至少n位数字：^\d{n,}$
验证m-n位的数字：^\d{m,n}$
验证零和非零开头的数字：^(0|[1-9][0-9]*)$
验证有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
验证有1-3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
验证非零的正整数：^\+?[1-9][0-9]*$
验证非零的负整数：^\-[1-9][0-9]*$
验证非负整数（正整数 + 0）  ^\d+$
验证非正整数（负整数 + 0）  ^((-\d+)|(0+))$
验证长度为3的字符：^.{3}$
验证由26个英文字母组成的字符串：^[A-Za-z]+$
验证由26个大写英文字母组成的字符串：^[A-Z]+$
验证由26个小写英文字母组成的字符串：^[a-z]+$
验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
验证由数字、26个英文字母或者下划线组成的字符串：^\w+$
验证用户密码:^[a-zA-Z]\w{5,17}$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。
验证是否含有 ^%&',;=?$\" 等字符：[^%&',;=?$\x22]+
验证汉字：^[\u4e00-\u9fa5],{0,}$
验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$
验证电话号码：^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。
验证身份证号（15位或18位数字）：^\d{15}|\d{}18$
验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12”
验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$    正确格式为：01、09和1、31。
整数：^-?\d+$
非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$
正浮点数   ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$
负浮点数  ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
浮点数  ^(-?\d+)(\.\d+)?

vs里输入汉字乱码-》 workround: create a 文本文件，  utf-8, copy-paste to VS


new WebSocket("ws://...", "echo-protocol");
WebSocket API是下一代客户端-服务器的异步通信方法。
WebSocket引入之处在于服务器和客户端可以在给定的时间范围内的任意时刻相互推送信息，而且允许跨域通信.
客户端的用法
var socket = new WebSocket('ws://localhost:8080'); 

socket.onopen = function(event) { 

     socket.send(发送消息'); //触发onmessage事件

     socket.close()   // 关闭Socket.... 触发onclose事件 

};

服务器端必须遵循特定的WS通信协议
在不同的websocket server中需要自定义处理方法 onconnection onmessage等借口
以下是node.js 实现的服务端程序，接下来再了解一下java 实现的WS server
// 需要HTTP 模块来启动服务器和Socket.IO

var http= require('http'), io= require('socket.io'); 

var server= http.createServer(function(req, res){

 // 发送HTML的headers和message

 res.writeHead(200,{ 'Content-Type': 'text/html' }); 

 res.end('<h1>Hello Socket Lover!</h1>'); 

}); 

server.listen(8080); 




// 创建一个Socket.IO实例，把它传递给服务器

var socket= io.listen(server); 

 

// 添加一个连接监听器

socket.on('connection', function(client){ 

 // 成功！现在开始监听接收到的消息

 client.on('message',function(event){

   console.log('Received message from client!',event); 

 }); 

 

 client.on('disconnect',function(){ 

   clearInterval(interval); 

   console.log('Server has disconnected'); 

 }); 

});
refer:
http://socket.io/


 <script>
    var socket = io.connect('http://localhost');
    socket.on('news', function (data) {
        console.log(data);
        socket.emit('my other event', { my: 'data' });
    });
   </script>



server.js:

console.log('Server is running at http://127.0.0.1:1234/');

HTML5: alert("A message was sent to server!")










